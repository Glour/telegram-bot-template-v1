networks:
  shared_network:
    driver: bridge

services:
  # Telegram bot service
  tg_bot:
    container_name: tg_bot
    build:
      target: dev-build
      context: .
      dockerfile: tg_bot/Dockerfile
    env_file:
      - .env.dev
    volumes:
      - ./infrastructure/migrations/versions:/app/infrastructure/migrations/versions
    environment:
      TOKEN: ${BOT_TOKEN}
    restart: unless-stopped
    networks:
      - shared_network

  # PostgreSQL database for bot
  postgres:
    image: postgres:15.3
    container_name: database
    restart: unless-stopped
    volumes:
      - database_volume:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES__DB_USER}
      POSTGRES_PASSWORD: ${POSTGRES__DB_PASSWORD}
      POSTGRES_DB: ${POSTGRES__DB_NAME}
    expose:
      - 5432
    env_file:
      - .env.dev
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES__DB_USER} -d ${POSTGRES__DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - shared_network

  # Redis service
  redis:
    image: redis:7.0.11
    container_name: redis
    ports:
      - "7379:6379"
    env_file:
      - .env.dev
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 10s
      retries: 10
    restart: unless-stopped
    networks:
      - shared_network

  # Dozzle logging service
  dozzle:
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    networks:
      - shared_network

volumes:
  database_volume:
